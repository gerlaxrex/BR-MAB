#ifndef UTILS_H
#define UTILS_H

#include "mabalg.h"
#include <string>
#include <map>
#include "cdt.h"

static int WRITE_EVERY = 50; // write to file every tot timestep (value used by statistic_manager and in plot_results.py)
static int NEG_INF = -10000000;
static int POS_INF = 10000000;

class CDT;

/**
 * @return a random double between zero and one
 */
double random_unit();

/**
 * @brief Create an algorithm from its specification
 *
 * @param  line        string, specification of the algorithm
 * @param  num_of_arms integer, number of arms the algorithm will work with
 * @param  rng         boost::mt19937*, random number generator used by the algorithm
 * @return             an instance of the algorithm devised in the specification
 */
MABAlgorithm* get_algorithm(string line, boost::mt19937* rng, MAB* mab);

/**
 * @brief Create a CDT from its specification
 *
 * @param  line        string, specification of the CDT
 * @return             an instance of the CDT devised in the specification
 */
CDT* get_cdt(string line);

/**
 * @brief Create an arm from its specification
 *
 * @param  line        string, specification of the arm distribution
 * @param  rng         boost::mt19937*, random number generator used by the algorithm
 * @return             an instance of the distribution devised in the specification
 */
Distribution* get_distribution(string line, boost::mt19937* rng);

/**
 * @param  data   vector of double, data to analyse
 * @param  moment integer, order of the moment to be computed
 * @return        the n-th moment computed from the data
 */
double get_moment(vector<double> data, int moment);

/**
 * @param  data   vector of double, data to analyse
 * @param  cumulant integer, order of the cumulant to be computed
 * @return        the n-th cumulant computed from the data
 */
double get_cumulant(vector<double> data, int cumulant);

/**
 * @brief Create a directory at the specified location
 *
 * @param name string, name of the directory
 */
void make_dir(string name);

/**
 * @brief Remove all the directories that contain data generated by the simulations
 */
void remove_dirs();


// --

double t_test(double M, double mean, double std, unsigned n, int type = 0, double shift= 0.0f);

double z_test(double M, double mean, double std, unsigned n, int type = 0, double shift = 0.0f);

double z_test_alternative(double M, double mean, double std1, double std2, unsigned n1, unsigned n2, int type, double shift = 0.0f);

double z_tost(double M, double mean, double std, unsigned n, double lshift = -0.099, double ushift = 0.099);

double z_tost_alternative(double M, double mean, double std1, double std2, unsigned n1, unsigned n2, double lshift=-0.099, double ushift=0.099);

double t_tost(double M, double mean, double std, unsigned n, double lshift = -0.099, double ushift = 0.099);

//This is a Concept for single arm
struct Concept{
    double mean;
    double std;
    unsigned n;
    unsigned prev_n;
    Concept();
    Concept(double mean,double std,double n);
    Concept& updateConcept(double reward);
    void print();
};

//Concept for multiple arms, for global 
struct multiConcept{
    vector<double> mean;
    vector<double> std;
    vector<unsigned> n;
    vector<unsigned> prev_n;
    multiConcept(int num_of_arms);
    multiConcept(vector<double>& mean, vector<double>& std, vector<unsigned>& n);
    multiConcept& updateConcept(double reward, int pulled_arm);
    void print();
};

#endif
